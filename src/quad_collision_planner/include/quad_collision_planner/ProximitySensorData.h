/* Auto-generated by genmsg_cpp for file /home/praveenv4k/catkin_ws/src/ros_stacks/vrep/vrep_common/msg/ProximitySensorData.msg */
#ifndef VREP_COMMON_MESSAGE_PROXIMITYSENSORDATA_H
#define VREP_COMMON_MESSAGE_PROXIMITYSENSORDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point32.h"
#include "std_msgs/Int32.h"
#include "geometry_msgs/Point32.h"

namespace vrep_common
{
template <class ContainerAllocator>
struct ProximitySensorData_ {
  typedef ProximitySensorData_<ContainerAllocator> Type;

  ProximitySensorData_()
  : detectedPoint()
  , detectedObject()
  , normalVector()
  {
  }

  ProximitySensorData_(const ContainerAllocator& _alloc)
  : detectedPoint(_alloc)
  , detectedObject(_alloc)
  , normalVector(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _detectedPoint_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  detectedPoint;

  typedef  ::std_msgs::Int32_<ContainerAllocator>  _detectedObject_type;
   ::std_msgs::Int32_<ContainerAllocator>  detectedObject;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _normalVector_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  normalVector;


  typedef boost::shared_ptr< ::vrep_common::ProximitySensorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::ProximitySensorData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ProximitySensorData
typedef  ::vrep_common::ProximitySensorData_<std::allocator<void> > ProximitySensorData;

typedef boost::shared_ptr< ::vrep_common::ProximitySensorData> ProximitySensorDataPtr;
typedef boost::shared_ptr< ::vrep_common::ProximitySensorData const> ProximitySensorDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrep_common::ProximitySensorData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrep_common::ProximitySensorData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::ProximitySensorData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::ProximitySensorData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::ProximitySensorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca4cef31bef118238b22d9d3bc7e3089";
  }

  static const char* value(const  ::vrep_common::ProximitySensorData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca4cef31bef11823ULL;
  static const uint64_t static_value2 = 0x8b22d9d3bc7e3089ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::ProximitySensorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/ProximitySensorData";
  }

  static const char* value(const  ::vrep_common::ProximitySensorData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::ProximitySensorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point32 detectedPoint\n\
std_msgs/Int32 detectedObject\n\
geometry_msgs/Point32 normalVector\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const  ::vrep_common::ProximitySensorData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::ProximitySensorData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::ProximitySensorData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.detectedPoint);
    stream.next(m.detectedObject);
    stream.next(m.normalVector);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ProximitySensorData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::ProximitySensorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrep_common::ProximitySensorData_<ContainerAllocator> & v) 
  {
    s << indent << "detectedPoint: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.detectedPoint);
    s << indent << "detectedObject: ";
s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.detectedObject);
    s << indent << "normalVector: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.normalVector);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_PROXIMITYSENSORDATA_H

